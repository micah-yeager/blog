import type {
  HeadersFunction,
  LinksFunction,
  MetaFunction
} from "@vercel/remix"
import type { PropsWithChildren } from "react"
import {
  Links,
  LiveReload,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
  useLoaderData
} from "@remix-run/react"
import { Analytics } from "@vercel/analytics/react"
import { json } from "@vercel/remix"
import { SpeedInsights } from "@vercel/speed-insights/remix"

import type { Env } from "~/browser-globals"
import { AppError } from "~/components/AppError"
import { Layout } from "~/components/Layout"
import { TURNSTILE_SITE_KEY } from "~/services/captcha.server"

import styles from "./tailwind.css"

export const links: LinksFunction = () => [
  { rel: "stylesheet", href: styles },
  { rel: "preconnect", href: "https://rsms.me/" },
  { rel: "stylesheet", href: "https://rsms.me/inter/inter.css" },
  { rel: "icon", type: "image/svg+xml", href: "/favicon.svg" },
  { rel: "icon", type: "image/png", href: "/favicon.png" }
]

export const headers: HeadersFunction = () => {
  // Default set of headers used for data requests.
  const clientMaxAge = 60 * 5 // 5 minutes
  const cdnMaxAge = 60 * 60 // 1 hour
  const revalidationPeriod = 60 * 60 * 24 * 90 // 90 days
  return {
    "Cache-Control": `max-age=${clientMaxAge}, s-maxage=${cdnMaxAge}, stale-while-revalidate=${revalidationPeriod}`
  }
}

export const meta: MetaFunction = () => {
  return [
    { title: "Micah Yeager" },
    { description: "Solutions architect, developer, and cat enthusiast." }
  ]
}

export async function loader() {
  return json({
    ENV: {
      TURNSTILE_SITE_KEY
    } as Env
  })
}

function App({ title, children }: PropsWithChildren<{ title?: string }>) {
  // Title is generated by Remix in each route, so ignore it here
  // unless explicitly provided.
  // noinspection HtmlRequiredTitleElement
  return (
    // Always start with the "dark" class, so we don't flash-bang our dark mode
    // users while the JS loads.
    <html lang="en" className="dark h-full antialiased">
      <head>
        {title && <title>{title}</title>}
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <Meta />
        <Links />
      </head>
      <body className="h-full w-full bg-zinc-50 text-zinc-600 dark:bg-black dark:text-zinc-400">
        <Layout>{children}</Layout>
        <ScrollRestoration />
        <Scripts />
        <SpeedInsights />
        <Analytics />
        <LiveReload />
      </body>
    </html>
  )
}

export default function Root() {
  const { ENV } = useLoaderData<typeof loader>()

  return (
    <App>
      <Outlet context={ENV} />
    </App>
  )
}

export function ErrorBoundary() {
  return (
    <App title="Whoops :/ | Micah Yeager">
      <AppError />
    </App>
  )
}
